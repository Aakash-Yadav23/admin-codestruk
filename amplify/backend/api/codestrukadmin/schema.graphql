enum BlogStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

type Author 
  @model 
  @auth(rules: [
    { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["Author"], operations: [create, update, delete, read] },
    { allow: public, provider: apiKey, operations: [read] }
  ]) {
  id: ID!
  name: String!
  bio: String!
  email: AWSEmail!
  image: String!
  blogs: [Blog] @hasMany
}

type Blog 
  @model 
  @auth(rules: [
    { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["Author"], operations: [create, update, delete, read] },
    { allow: public, provider: apiKey, operations: [read] }
  ]) {
  id: ID!
  title: String!
  slug: String!
  thumbnail:String!
  authorId: ID!
  author: Author @belongsTo
  content: String!
  excerpt: String!
  tableOfContents: AWSJSON!
  seoTitle: String!
  seoDescription: String!
  seoKeywords: String!
  views: Int
  categoryId: ID!
  category: Category @belongsTo
  featuredId: ID
  featured: Featured @belongsTo
  publishedAt: AWSDateTime!
  status: BlogStatus!
  comments: [Comment] @hasMany
  readTime: Int
}

type Category 
  @model 
  @auth(rules: [
    { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["Author"], operations: [create, update, delete, read] },
    { allow: public, provider: apiKey, operations: [read] }
  ]) {
  id: ID!
  name: String!
  description: String!
  image: AWSURL!
  blogs: [Blog] @hasMany
}

type Comment 
  @model 
  @auth(rules: [
    { allow: public, provider: apiKey, operations: [read] }
  ]) {
  id: ID!
  name: String!
  bio: String
  email: AWSEmail!
  comment: String!
  blogId: ID!
  blog: Blog @belongsTo
  status: CommentStatus!
}

type Featured 
  @model 
  @auth(rules: [
    { allow: groups, groups: ["Admin"], operations: [create, update, delete, read] },
    { allow: groups, groups: ["Author"], operations: [create, update, delete, read] },
    { allow: public, provider: apiKey, operations: [read] }
  ]) {
  id: ID!
  title: String!
  description: String!
  image: AWSURL!
  blogs: [Blog] @hasMany
}
